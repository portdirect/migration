#!/bin/bash
set -eux

if [[ "rhel rhel7 centos7 fedora" =~ "$DISTRO_NAME" ]]; then
    yum -y install bridge-utils docker python-docker

    mkdir -p /etc/kubernetes
    mkdir -p /var/lib/kubelet
    mkdir -p /var/lib/heat-config/heat-config-kubelet

    cat > /etc/systemd/system/kubelet.service <<EOF
[Unit]
Description=Kubernetes Kubelet Server
Documentation=https://github.com/GoogleCloudPlatform/kubernetes
After=docker.service
Requires=docker.service

[Service]
WorkingDirectory=/var/lib/kubelet
EnvironmentFile=-/etc/kubernetes/config
EnvironmentFile=-/etc/kubernetes/kubelet
ExecStartPre=-/usr/bin/docker stop harbor-kubelet
ExecStartPre=-/usr/bin/docker kill harbor-kubelet
ExecStartPre=-/usr/bin/docker rm harbor-kubelet
ExecStart=/usr/bin/docker run \
              --name=harbor-kubelet \
              --net=host \
              --pid=host \
              --privileged \
              -v /sys:/sys:ro \
              -v /var/run:/var/run:rw \
              -v /:/rootfs:ro \
              -v /dev:/dev \
              -v /var/lib/docker/:/var/lib/docker:rw \
              -v /var/lib/kubelet/:/var/lib/kubelet:rw \
              -v /var/lib/heat-config/heat-config-kubelet:/var/lib/heat-config/heat-config-kubelet:ro \
              -v /etc/machine-id:/etc/machine-id:ro \
              -v /etc/os-release:/etc/os-release:ro \
              -v /etc/pki/tls/certs/ca-bundle.crt:/etc/ssl/certs/ca-certificates.crt:ro \
              port/system-kube:latest /hyperkube kubelet \
                    --containerized=true \
                    \$KUBE_LOGTOSTDERR \
                    \$KUBE_LOG_LEVEL \
                    \$KUBELET_API_SERVER \
                    \$KUBELET_ADDRESS \
                    \$KUBELET_PORT \
                    \$KUBELET_HOSTNAME \
                    \$KUBE_ALLOW_PRIV \
                    \$KUBELET_POD_INFRA_CONTAINER \
                    \$KUBELET_ARGS

ExecStop=-/usr/bin/docker stop harbor-kubelet
Restart=on-failure

[Install]
WantedBy=multi-user.target
EOF


  cat > /etc/kubernetes/config <<EOF
###
# kubernetes system config
#
# The following values are used to configure various aspects of all
# kubernetes services, including
#
#   kube-apiserver.service
#   kube-controller-manager.service
#   kube-scheduler.service
#   kubelet.service
#   kube-proxy.service
# logging to stderr means we get it in the systemd journal
KUBE_LOGTOSTDERR="--logtostderr=true"

# journal message level, 0 is debug
KUBE_LOG_LEVEL="--v=0"

# Should this cluster be allowed to run privileged docker containers
KUBE_ALLOW_PRIV="--allow-privileged=false"

# How the controller-manager, scheduler, and proxy find the apiserver
KUBE_MASTER="--master=http://127.0.0.1:8080"
EOF

cat > /etc/kubernetes/config <<EOF
###
# kubernetes system config
#
# The following values are used to configure various aspects of all
# kubernetes services, including
#
#   kube-apiserver.service
#   kube-controller-manager.service
#   kube-scheduler.service
#   kubelet.service
#   kube-proxy.service
# logging to stderr means we get it in the systemd journal
KUBE_LOGTOSTDERR="--logtostderr=true"

# journal message level, 0 is debug
KUBE_LOG_LEVEL="--v=0"

# Should this cluster be allowed to run privileged docker containers
KUBE_ALLOW_PRIV="--allow-privileged=false"

# How the controller-manager, scheduler, and proxy find the apiserver
KUBE_MASTER="--master=http://127.0.0.1:8080"
[root@server kubelet]# cat /etc/kubernetes/kubelet
###
# kubernetes kubelet (minion) config

# The address for the info server to serve on (set to 0.0.0.0 or "" for all interfaces)
KUBELET_ADDRESS="--address=127.0.0.1"

# The port for the info server to serve on
# KUBELET_PORT="--port=10250"

# You may leave this blank to use the actual hostname
KUBELET_HOSTNAME="--hostname-override=127.0.0.1"

# location of the api-server
KUBELET_API_SERVER="--api-servers=http://127.0.0.1:8080"

# pod infrastructure container
KUBELET_POD_INFRA_CONTAINER="--pod-infra-container-image=gcr.io/google_containers/pause:2.0"

# Add your own!
KUBELET_ARGS="--config=/var/lib/heat-config/heat-config-kubelet/kubelet-manifests"
EOF

    cat > /etc/sysconfig/network-scripts/ifcfg-cbr0 <<EOF
DEVICE=cbr0
TYPE=Bridge
IPADDR=10.240.1.1
NETMASK=255.255.255.0
ONBOOT=yes
STP=yes
MTU=1450

# With the default forwarding delay of 15 seconds,
# many operations in a 'docker build' will simply timeout
# before the bridge starts forwarding.
DELAY=2
EOF

cat > /etc/sysconfig/network-scripts/route-cbr0 <<EOF
10.240.0.0/16 dev cbr0 scope link src 10.240.1.1
EOF

# defer docker starting until cbr0 is up
cat > /etc/systemd/system/docker.service <<EOF
[Unit]
Description=Docker Application Container Engine
Documentation=https://docs.docker.com
After=network-online.target

[Service]
Type=notify
# the default is not to use systemd for cgroups because the delegate issues still
# exists and systemd currently does not support the cgroup feature set required
# for containers run by docker
ExecStartPre=/sbin/modprobe overlay
ExecStart=/usr/bin/docker daemon -H unix://var/run/docker.sock --bridge cbr0 --mtu 1450 --iptables=false --storage-driver=overlay
MountFlags=slave
LimitNOFILE=1048576
LimitNPROC=1048576
LimitCORE=infinity
TimeoutStartSec=0
# set delegate yes so that systemd does not reset the cgroups of docker containers
Delegate=yes

[Install]
WantedBy=multi-user.target
EOF





cat > /etc/systemd/system/heat-config-kubelet-nat-rule.service <<EOF
[Unit]
Description=iptables rule to allow nat masquerading out of 10.240.1.0/24

[Service]
ExecStart=/usr/sbin/iptables -t nat -A POSTROUTING -o eth0 -s 10.240.1.0/24 -j MASQUERADE
Type=oneshot

[Install]
WantedBy=multi-user.target
EOF

if [ -f "/opt/heat-docker/images.tar" ]; then
    cat > /etc/systemd/system/heat-config-kubelet-load-images.service <<EOF
[Unit]
Description=Call docker load on /opt/heat-config/images.tar
After=docker.service
Before=os-collect-config.service kubelet.service

[Service]
ExecStart=/bin/docker load -i /opt/heat-docker/images.tar
ExecStart=/bin/rm -f /opt/heat-docker/images.tar
Type=oneshot

[Install]
WantedBy=multi-user.target
EOF
    systemctl enable heat-config-kubelet-load-images.service
fi


    systemctl disable docker.service
    systemctl enable docker.service
    systemctl enable kubelet.service
    systemctl enable heat-config-kubelet-nat-rule.service
    systemctl disable firewalld

SCRIPTDIR=$(dirname $0)
install -D -g root -o root -m 0755 ${SCRIPTDIR}/hook-kubelet.py /var/lib/heat-config/hooks/kubelet

else
    echo "Distribution '$DISTRO_NAME' is not supported"
    exit 1
fi
