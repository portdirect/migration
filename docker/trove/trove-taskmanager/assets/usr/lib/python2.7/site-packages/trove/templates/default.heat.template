heat_template_version: '2013-05-23'
description: Instance creation template for {{datastore_manager}}
parameters:
  Flavor:
    type: string
  VolumeType:
    type: string
    default: 'LVMVolume'
  VolumeSize:
    type: number
    default : '1'
  InstanceId:
    type: string
  ImageId:
    type: string
  DatastoreManager:
    type: string
  AvailabilityZone:
    type: string
    default: nova
  TenantId:
    type: string


  TroveOpenStackRegion:
    type: string
    default: 'HarborOS'
  TroveRabbitPassword:
    type: string
    hidden: true
  TroveRabbitUser:
    type: string
    hidden: true
  TroveRabbitHost:
    type: string
    hidden: true
  TroveRabbitPort:
    type: string
    hidden: true

resources:
  wait_condition:
    type: OS::Heat::WaitCondition
    properties:
      handle: {get_resource: wait_handle}
      count: 1
      timeout: 300

  wait_handle:
    type: OS::Heat::WaitConditionHandle

{% for port in ports %}
  {{ port.name }}:
    type: OS::Neutron::Port
    properties:
      network_id: "{{ port.net_id }}"
      security_groups: [{Ref: DatastoreSG}]
      {% if port.fixed_ip %}
      fixed_ips: [{"ip_address": "{{ port.fixed_ip }}"}]
      {% endif %}
{% endfor %}


  add_harbor_ca:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ungrouped
      config: |
        #!/bin/sh
        IPA_CA_CRT={{IPA_CA_CRT_REPLACED_BY_TROVE_TASKMANAGER_LAUNCH_SCRIPT}}
        mkdir -p /etc/pki/ca-trust/source/anchors/
        echo $IPA_CA_CRT | base64 --decode > /etc/pki/ca-trust/source/anchors/ipa.crt
        update-ca-trust


  trove_auth_config:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ungrouped
      config:
        str_replace:
          params:
            $TroveOpenStackRegion: {get_param: TroveOpenStackRegion}
            $TroveRabbitHost: {get_param: TroveRabbitHost}
            $TroveRabbitPort: {get_param: TroveRabbitPort}
            $TroveRabbitUser: {get_param: TroveRabbitUser}
            $TroveRabbitPassword: {get_param: TroveRabbitPassword}
          template: |
            #!/bin/bash
            cfg=/etc/trove/trove-guestagent.conf
            crudini --set $cfg DEFAULT os_region_name "$TroveOpenStackRegion"
            crudini --set $cfg oslo_messaging_rabbit rabbit_host "$TroveRabbitHost"
            crudini --set $cfg oslo_messaging_rabbit rabbit_port "$TroveRabbitPort"
            crudini --set $cfg oslo_messaging_rabbit rabbit_userid "$TroveRabbitUser"
            crudini --set $cfg oslo_messaging_rabbit rabbit_password "$TroveRabbitPassword"


  trove_write_config:
    type: OS::Heat::CloudConfig
    properties:
      cloud_config:
        write_files:
{% for file, content in files.iteritems() %}
        - path: {{ file }}
          content: |
            {{ content | indent(12) }}
          mode: '000644'
          owner: root
          group: root
{% endfor %}


  trove_init_script:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ungrouped
      config: |
        #!/bin/sh
        systemctl enable openstack-trove-guestagent
        systemctl start openstack-trove-guestagent


  trove_ready_signal:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ungrouped
      config:
        str_replace:
          params:
            wc_notify: { get_attr: ['wait_handle', 'curl_cli'] }
          template: |
            #!/bin/sh
            wc_notify --data-binary '{"status": "SUCCESS"}'


  trove_server_init:
    type: OS::Heat::MultipartMime
    properties:
      parts:
      - config: {get_resource: add_harbor_ca}
      - config: {get_resource: trove_auth_config}
      - config: {get_resource: trove_write_config}
      - config: {get_resource: trove_init_script}
      - config: {get_resource: trove_ready_signal}


  BaseInstance:
    type: OS::Nova::Server
    properties:
      image: {get_param: ImageId}
      flavor: {get_param: Flavor}
      availability_zone: {get_param: AvailabilityZone}
      security_groups: [{get_resource: DatastoreSG}]
      user_data_format: RAW
      user_data: {get_resource: trove_server_init}
      networks:
{% for port in ports %}
        - port: { get_resource: {{ port.name }} }
{% endfor %}

{% if volume_support %}
  DataVolume:
    type: AWS::EC2::Volume
    properties:
      size: {get_param: VolumeSize}
      availability_zone: {get_param: AvailabilityZone}

  MountPoint:
    type: AWS::EC2::VolumeAttachment
    properties:
      InstanceId: {get_resource: BaseInstance}
      VolumeId: {get_resource: DataVolume}
      Device: /dev/vdb
{% endif %}

  DatastoreSG:
    type: OS::Neutron::SecurityGroup
    properties:
      description: Default Security group for {{datastore_manager}}
{% if tcp_rules or udp_rules %}
      rules:
{% for rule in tcp_rules %}
      - direction: "ingress"
        protocol: "tcp"
        port_range_min: "{{rule.from_}}"
        port_range_max: "{{rule.to_}}"
        remote_ip_prefix: "{{rule.cidr}}"
{% endfor %}
{% for rule in udp_rules %}
      - direction: "ingress"
        protocol: "udp"
        port_range_min: "{{rule.from_}}"
        port_range_max: "{{rule.to_}}"
        remote_ip_prefix: "{{rule.cidr}}"
{% endfor %}
{% endif %}
